local defsave = require "defsave.defsave"
local monarch = require "monarch.monarch"
local controls = require "input.controls"

local screens = {
	show_splashscreen = hash("show_splashscreen"),
	show_level = hash("show_level"),
	show_titlescreen = hash("show_titlescreen"),
	popup_pause = hash("popup_pause")
}
local toggle_fullscreen = hash("toggle_fullscreen")

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("#", screens.show_titlescreen)
	msg.post("@render:", "clear_color", { color = vmath.vector4(0, 0, 0, 1) } )
	defsave.set_appname("perfect_1")
	defsave.use_serialize = true
	defsave.load("settings")
	self.music_playing = false
	if defos then
		defos.disable_maximize_button()
		defos.disable_minimize_button()
		defos.disable_window_resize()
	end
end

function final(self)
	defsave.save_all()
end

local function toggle_pause(self)
	self.paused = not self.paused
	if self.paused then
		monarch.show("popup_pause")
	else
		monarch.hide("popup_pause")
	end
end

function on_message(self, message_id, message, sender)
	if message_id == screens.show_level then
		monarch.show("level", {}, { current_level = message.current_level or 1, control_mode = message.control_mode or controls.default_control_mode })
	elseif message_id == screens.show_splashscreen then
		monarch.show("splashscreen")
	elseif message_id == screens.show_titlescreen then
		if not self.music_playing then
			sound.play(msg.url(nil, "sound", "music"))
			self.music_playing = true
		end
		monarch.show("titlescreen", {}, { subscreen = message.subscreen or "menu" })
	elseif message_id == screens.popup_pause then
		toggle_pause(self)
	elseif defos and message_id == toggle_fullscreen then
		defos.toggle_fullscreen()
	end
end
