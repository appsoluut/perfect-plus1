local defsave = require "defsave.defsave"
local monarch = require "monarch.monarch"

local table = table
local srep = string.rep
local max_levels = 48
local select_columns = 8

local states = {
	menu = 1,
	credits = 2,
	level_select = 3
}

local function lpad(s, l, c)
	return srep(c or ' ', l - #tostring(s)) .. s
end

local function update_cursor(self)
	self.active_item = self.menu_items[self.active_index]

	local position = gui.get_position(self.active_item)
	local cursor = gui.get_position(self.select_node)
	cursor.y = position.y + self.select_scale.y * 2
	gui.set_position(self.select_node, cursor)
end

local function update_level_selector(self)
	local x = (self.level_selected - 1) % select_columns
	local y = math.floor((self.level_selected - 1) / select_columns)

	gui.set_position(self.selector_level_node, vmath.vector3(16 + x * 90, -56 + y * -60, 0))
	msg.post(msg.url("titlescreen", "/script", nil), hash("preview_level"), { level = self.level_selected })
end

local function init_levels(self)
	if self.level_nodes ~= nil and #self.level_nodes > 0 then return end

	self.level_nodes = {}
	for level = 0, max_levels - 1 do
		local node = gui.clone(self.pick_level_node)
		local x = #self.level_nodes % select_columns
		local y = math.floor(#self.level_nodes / select_columns)

		gui.set_text(node, lpad(level + 1, 2, '0'))
		gui.set_position(node, vmath.vector3(32 + x * 90, -60 + y * -60, 0))
		local enabled = false
		if level + 1 <= self.max_levels then
			enabled = true
		end
		if not enabled then
			gui.set_alpha(node, 0.50)
		end

		table.insert(self.level_nodes, {
			node = node,
			level = level + 1,
			enabled = enabled
		})
	end

	update_level_selector(self)

	gui.delete_node(self.pick_level_node)
end

local function update_state(self)
	if self.state == states.menu then
		gui.set_visible(self.state_menu_node, true)
		gui.set_visible(self.copyright_node, true)
		gui.set_visible(self.state_credits_node, false)
		gui.set_visible(self.level_select_node, false)
		msg.post(msg.url("titlescreen", "/script", nil), hash("hide_tilemap"))
	elseif self.state == states.credits then
		gui.set_visible(self.state_menu_node, false)
		gui.set_visible(self.copyright_node, false)
		gui.set_visible(self.state_credits_node, true)
		gui.set_visible(self.level_select_node, false)
	elseif self.state == states.level_select then
		gui.set_visible(self.state_menu_node, false)
		gui.set_visible(self.copyright_node, false)
		gui.set_visible(self.level_select_node, true)
		init_levels(self)
		msg.post(msg.url("titlescreen", "/script", nil), hash("show_tilemap"), { level = self.level_selected or 1 })
	end
end

local function update_menu_position(self, node)
	local position = gui.get_position(node)
	position.y = position.y + (self.button_size.y * self.select_scale.y)
	gui.set_position(node, position)
end

local function update_fullscreen_text(self)
	local fullscreen_state = "OFF"
	if self.fullscreen_state then
		fullscreen_state = "ON"
	end
	gui.set_text(self.fullscreen_node, self.fullscreen_text .. fullscreen_state)
end

function init(self)
	local data = monarch.data("titlescreen")

	self.current_level = defsave.get("settings", "level") or 1
	self.max_levels = defsave.get("settings", "max_level") or 1
	self.level_selected = self.max_levels
	
	if data ~= nil and data.subscreen ~= nil and data.subscreen == "credits" then
		self.state = states.credits
	else
		self.state = states.menu
	end

	self.state_menu_node = gui.get_node("menu")
	self.state_credits_node = gui.get_node("credits")
	self.copyright_node = gui.get_node("copyright")
	self.level_select_node = gui.get_node("e_content")
	self.pick_level_node = gui.get_node("level_select/level")

	self.selector_level_node = gui.get_node("selector_level")
	self.selector_level_scale = gui.get_scale(self.selector_level_node)

	self.select_node = gui.get_node("select")
	self.select_scale = gui.get_scale(self.select_node)

	self.continue_node = gui.get_node("menu_item_continue/title")
	self.new_game_node = gui.get_node("menu_item_newgame/title")
	self.fullscreen_node = gui.get_node("menu_item_fullscreen/title")
	self.fullscreen_text = gui.get_text(self.fullscreen_node)
	if defos then
		self.fullscreen_state = defos.is_fullscreen()
	else
		self.fullscreen_state = false
	end
	self.levelselect_node = gui.get_node("menu_item_levelselect/title")
	self.credits_node = gui.get_node("menu_item_credits/title")

	self.button_size = gui.get_size(self.new_game_node)

	self.proxy_url = msg.url("proxy", "/loader", "script")

	self.menu_items = {}

	if self.current_level > 1 then
		table.insert(self.menu_items, self.continue_node)
	else
		gui.set_visible(self.continue_node, false)
	end

	table.insert(self.menu_items, self.new_game_node)
	if not html5 then
		update_fullscreen_text(self)
		table.insert(self.menu_items, self.fullscreen_node)
	else
		gui.set_visible(self.fullscreen_node, false)
		update_menu_position(self, self.levelselect_node)
		update_menu_position(self, self.credits_node)
	end
	table.insert(self.menu_items, self.levelselect_node)
	table.insert(self.menu_items, self.credits_node)

	self.active_index = 1
	update_cursor(self)

	update_state(self)
	defsave.save("settings", true)

	msg.post(".", "acquire_input_focus")
end

function final(self)
	msg.post(".", "release_input_focus")
end

function on_input(self, action_id, action)
	if not action.released then return end

	if self.state == states.menu then
		if action_id == hash("touch") then
			if self.active_item == self.continue_node then
				msg.post(self.proxy_url, "show_level", { current_level = self.current_level } )
			elseif self.active_item == self.levelselect_node then
				self.state = states.level_select
				update_state(self)
			elseif self.active_item == self.new_game_node then
				msg.post(self.proxy_url, "show_level")
			elseif self.active_item == self.fullscreen_node then
				msg.post(self.proxy_url, "toggle_fullscreen")
				self.fullscreen_state = not self.fullscreen_state
				update_fullscreen_text(self)
			elseif self.active_item == self.credits_node then
				self.state = states.credits
				update_state(self)
			end
		elseif action_id == hash("up") then
			self.active_index = math.max(1, self.active_index - 1)
			update_cursor(self)
		elseif action_id == hash("down") then
			self.active_index = math.min(#self.menu_items, self.active_index + 1)
			update_cursor(self)
		end
	elseif self.state == states.level_select then
		if action_id == hash("left") then
			local next_level = self.level_selected - 1
			if next_level < 1 then
				next_level = self.max_levels
			else
				next_level = math.max(1, next_level)
			end
			self.level_selected = next_level
			update_level_selector(self)
		elseif action_id == hash("right") then
			local next_level = self.level_selected + 1
			if next_level > self.max_levels then
				next_level = 1
			else
				next_level = math.min(self.max_levels, next_level)
			end
			self.level_selected = next_level
			update_level_selector(self)
		elseif action_id == hash("up") and self.max_levels > select_columns then
			local next_level = (self.level_selected - select_columns) % max_levels
			if next_level == 0 then
				next_level = self.max_levels
			else
				next_level = math.min(self.max_levels, next_level)
			end
			self.level_selected = next_level
			update_level_selector(self)
		elseif action_id == hash("down") and self.max_levels > select_columns then
			self.level_selected = math.min(self.max_levels, (self.level_selected + select_columns) % max_levels)
			update_level_selector(self)
		elseif action_id == hash("touch") then
			msg.post(self.proxy_url, "show_level", { current_level = self.level_selected } )
		elseif action_id == hash("back") then
			self.state = states.menu
			update_state(self)
		end
	else
		if action_id == hash("touch") or action_id == hash("back") then
			self.state = states.menu
			update_state(self)
		end
	end
end
